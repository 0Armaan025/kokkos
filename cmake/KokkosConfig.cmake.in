# Compute paths
@PACKAGE_INIT@

GET_FILENAME_COMPONENT(Kokkos_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
SET(Kokkos_INCLUDE_DIRS "@CONF_INCLUDE_DIRS@")

INCLUDE("${Kokkos_CMAKE_DIR}/KokkosTargets.cmake")

# These are IMPORTED targets created by KokkosTargets.cmake
SET(Kokkos_LIBRARY_DIRS    @INSTALL_LIB_DIR@)
SET(Kokkos_SEPARATE_LIBS   @KOKKOS_SEPARATE_LIBS@)
SET(Kokkos_LIBRARIES       @KOKKOS_EXT_LIBRARIES@)

SET(Kokkos_DEVICES_UC                   @KOKKOS_ENABLED_DEVICES_UC@)
SET(Kokkos_DEVICES                      @KOKKOS_ENABLED_DEVICES@)
SET(Kokkos_OPTIONS                      @KOKKOS_ENABLED_OPTIONS@)
SET(Kokkos_ARCH                         @KOKKOS_ENABLED_ARCH_LIST@)

FOREACH(DEV Kokkos_ENABLED_DEVICES)
SET(Kokkos_ENABLE_${DEV} ON)
ENDFOREACH()





FUNCTION(KOKKOS_ASSERT)
  CMAKE_PARSE_ARGUMENTS(
    PARSE
    ""
    ""
    "ARCH;OPTIONS;DEVICES;TPLS"
    ${ARGN}
  )



  IF(PARSE_UNPARSED_ARGUMENTS)
    MESSAGE(FATAL_ERROR "KOKKOS_ASSERT received bad arguments: ${PARSE_UNPARSED_ARGUMENTS}")
  ENDIF()

  FOREACH(TPL ${PARSE_TPLS})
    STRING(TOUPPER ${TPL} UC_NAME)
    IF (${UC_NAME} IN_LIST Kokkos_OPTIONS)
      MESSAGE(STATUS "GOOD: Kokkos was built with TPL ${TPL}")
    ELSE()
      MESSAGE(FATAL_ERROR "Kokkos not built with TPL ${TPL}")
    ENDIF()
  ENDFOREACH()

  FOREACH(DEV ${PARSE_DEVICES})
    STRING(TOUPPER ${DEV} UC_NAME)
    IF (${UC_NAME} IN_LIST Kokkos_DEVICES_UC)
      MESSAGE(STATUS "GOOD: Kokkos was built with device ${DEV}")
    ELSE()
      MESSAGE(FATAL_ERROR "Kokkos not built with device ${DEV}")
    ENDIF()
  ENDFOREACH()

  FOREACH(OPT ${PARSE_OPTIONS})
    STRING(TOUPPER ${OPT} UC_NAME)
    IF (${UC_NAME} IN_LIST Kokkos_OPTIONS)
      MESSAGE(STATUS "GOOD: Kokkos was built with option ${OPT}")
    ELSE()
      MESSAGE(FATAL_ERROR "Kokkos not built with option ${OPT}")
    ENDIF()
  ENDFOREACH()

  FOREACH(ARCH ${PARSE_ARCH})
    STRING(TOUPPER ${ARCH} UC_NAME)
    IF (${UC_NAME} IN_LIST Kokkos_ARCH)
      MESSAGE(STATUS "GOOD: Kokkos was built with architecture ${ARCH}")
    ELSE()
      MESSAGE(FATAL_ERROR "Kokkos not built with architecture ${ARCH}")
    ENDIF()
  ENDFOREACH()


ENDFUNCTION()

FUNCTION(TARGET_LINK_KOKKOS TARGET)
  CMAKE_PARSE_ARGUMENTS(
    PARSE
    "PRIVATE;PUBLIC;INTERFACE"
    ""
    ""
    ${ARGN}
  )

  SET(LINK_TYPE)
  IF (PARSE_PRIVATE)
    SET(LINK_TYPE PRIVATE)
  ELSEIF(PARSE_PUBLIC)
    SET(LINK_TYPE PUBLIC)
  ELSEIF(PARSE_INTERFACE)
    SET(LINK_TYPE INTERFACE)
  ENDIF()

  KOKKOS_ASSERT(${PARSE_UNPARSED_ARGUMENTS})

  FOREACH(LIB ${Kokkos_LIBRARIES})
    TARGET_LINK_LIBRARIES(${TARGET} ${LINK_TYPE} ${LIB})
  ENDFOREACH()
ENDFUNCTION(TARGET_LINK_KOKKOS)

#Find dependencies
INCLUDE(CMakeFindDependencyMacro)
SET(FOUND_HPX_DIR @HPX_DIR@)
SET(FOUND_HPX_ROOT @HPX_ROOT@)
#figure out if we found HPX using root or dir
#set the search path accordingly, unless it got overriden
IF (NOT DEFINED HPX_ROOT AND NOT DEFINED HPX_DIR)
  IF (FOUND_HPX_DIR)
    SET(HPX_DIR ${FOUND_HPX_DIR})
  ELSEIF(FOUND_HPX_ROOT)
    SET(HPX_ROOT ${FOUND_HPX_ROOT})
  ENDIF()
ENDIF()

SET(KOKKOS_USE_CXX_EXTENSIONS @KOKKOS_USE_CXX_EXTENSIONS@)
IF (NOT DEFINED CMAKE_CXX_EXTENSIONS OR CMAKE_CXX_EXTENSIONS)
  IF (NOT KOKKOS_USE_CXX_EXTENSIONS)
    MESSAGE(WARNING "The installed Kokkos configuration does not support CXX extensions. Forcing -DCMAKE_CXX_EXTENSIONS=Off")
    SET(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL "" FORCE)
  ENDIF()
ENDIF()

SET(KOKKOS_ENABLE_HPX @KOKKOS_ENABLE_HPX@)
IF (KOKKOS_ENABLE_HPX)
  FIND_DEPENDENCY(HPX)
ENDIF()

SET(HWLOC_LIBRARIES @HWLOC_LIBRARIES@)
SET(KOKKOS_ENABLE_HWLOC @KOKKOS_ENABLE_HWLOC@)
IF(KOKKOS_ENABLE_HWLOC)
  ADD_LIBRARY(Kokkos::hwloc UNKNOWN IMPORTED)
  SET_TARGET_PROPERTIES(Kokkos::hwloc PROPERTIES
    IMPORTED_LOCATION "${HWLOC_LIBRARIES}"
  )
ENDIF()

SET(MEMKIND_LIBRARIES @MEMKIND_LIBRARIES@)
SET(MEMKIND_INCLUDE_DIR @MEMKIND_INCLUDE_DIR@)
SET(KOKKOS_ENABLE_MEMKIND @KOKKOS_ENABLE_MEMKIND@)
IF(KOKKOS_ENABLE_MEMKIND)
  ADD_LIBRARY(Kokkos::memkind UNKNOWN IMPORTED)
  SET_TARGET_PROPERTIES(Kokkos::memkind PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${MEMKIND_INCLUDE_DIR}"
    IMPORTED_LOCATION "${MEMKIND_LIBRARIES}"
  )
ENDIF()

SET(LIBDL_LIBRARIES   @LIBDL_LIBRARIES@)
SET(LIBDL_INCLUDE_DIR @LIBDL_INCLUDE_DIR@)
#no if, always need -ldl
ADD_LIBRARY(Kokkos::libdl UNKNOWN IMPORTED)
SET_TARGET_PROPERTIES(Kokkos::libdl PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${LIBDL_INCLUDE_DIR}"
  IMPORTED_LOCATION "${LIBDL_LIBRARIES}"
)

SET(LIBRT_LIBRARIES @LIBRT_LIBRARIES@)
SET(KOKKOS_ENABLE_LIBRT @KOKKOS_ENABLE_LIBRT@)
IF(KOKKOS_ENABLE_LIBRT)
  ADD_LIBRARY(Kokkos::librt UNKNOWN IMPORTED)
  SET_TARGET_PROPERTIES(Kokkos::librt PROPERTIES
    IMPORTED_LOCATION "${LIBRT_LIBRARIES}"
  )
ENDIF()
