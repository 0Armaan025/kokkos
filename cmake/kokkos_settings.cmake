########################## NOTES ###############################################
# This files goal is to take CMake options found in kokkos_options.cmake but 
# possibly set from elsewhere 
#   (see: trilinos/cmake/ProjectCOmpilerPostConfig.cmake) 
# using CMake idioms and map them onto the KOKKOS_SETTINGS variables that gets 
# passed to the kokkos makefile configuration:
#  make -f ${CMAKE_SOURCE_DIR}/core/src/Makefile ${KOKKOS_SETTINGS} build-makefile-cmake-kokkos
# that generates KokkosCore_config.h and kokkos_generated_settings.cmake
# To understand how to form KOKKOS_SETTINGS, see
#     <KOKKOS_PATH>/Makefile.kokkos

#-------------------------------------------------------------------------------
#------------------------------- GENERAL OPTIONS -------------------------------
#-------------------------------------------------------------------------------


# Ensure that KOKKOS_ARCH is in the ARCH_LIST
if (KOKKOS_ARCH MATCHES ",")
  message(WARNING "-- Detected a comma in: KOKKOS_ARCH=`${KOKKOS_ARCH}`")
  message("-- Although we prefer KOKKOS_ARCH to be semicolon-delimited, we do allow")
  message("-- comma-delimited values for compatibility with scripts (see github.com/trilinos/Trilinos/issues/2330)")
  string(REPLACE "," ";" KOKKOS_ARCH "${KOKKOS_ARCH}")
  message("-- Commas were changed to semicolons, now KOKKOS_ARCH=`${KOKKOS_ARCH}`")
endif()

if (KOKKOS_ARCH MATCHES "-")
  string(REPLACE "-" "_" KOKKOS_ARCH "${KOKKOS_ARCH}")
endif()

foreach(Arch ${KOKKOS_ARCH})
  string(TOUPPER ${Arch} ARCH)
  #force on all the architectures in the list
  SET(KOKKOS_ARCH_${ARCH} ON CACHE BOOL "optimize for architecture ${Arch}" FORCE)
  IF (NOT ${Arch} IN_LIST KOKKOS_ARCH_LIST)
    message(FATAL_ERROR "`${arch}` is not an accepted value in KOKKOS_ARCH=`${KOKKOS_ARCH}`."
      "  Please pick from these choices: ${KOKKOS_INTERNAL_ARCH_DOCSTR}")
  ENDIF()
endforeach()

if(KOKKOS_ENABLE_COMPILER_WARNINGS)
  IF (KOKKOS_COMPILER_ID STREQUAL PGI)
    #add nothing for PGI
  ELSE()
    LIST(APPEND KOKKOS_COMPILE_OPTIONS
      "-Wall" "-Wshadow" "-pedantic" 
      "-Wsign-compare" "-Wtype-limits" "-Wuninitialized")
  ENDIF()

  #add some extra for GNU
  IF (KOKKOS_COMPILER_ID STREQUAL GNU)
    LIST(APPEND KOKKOS_COMPILE_OPTIONS
      "-Wempty-body" 
      "-Wclobbered" 
      "-Wignored-qualifiers")
  ENDIF()
endif()


#------------------------------- KOKKOS_CUDA_OPTIONS ---------------------------
# Construct the Makefile options
if (KOKKOS_ENABLE_CUDA_LAMBDA)
  list(APPEND KOKKOS_CUDA_OPTIONS "-expt-extended-lambda")
endif()

if (KOKKOS_COMPILER_ID STREQUAL Clang)
  set(CUDA_ARCH_FLAG "--cuda-gpu-arch")
  list(APPEND KOKKOS_CUDA_OPTIONS "-x cuda")
elseif(KOKKOS_COMPILER_ID STREQUAL NVIDIA)
  set(CUDA_ARCH_FLAG "-arch")
endif()

IF (KOKKOS_COMPILER_ID STREQUAL NVIDIA)
  IF (KOKKOS_ENABLE_DEBUG OR CMAKE_BUILD_TYPE STREQUAL "DEBUG")
    LIST(APPEND KOKKOS_CUDA_OPTIONS -lineinfo)
  ENDIF()
  IF (KOKKOS_CXX_COMPILER_VERSION VERSION_GREATER 9.0 OR KOKKOS_CXX_COMPILER_VERSION VERSION_EQUAL 9.0)
    LIST(APPEND KOKKOS_CUDAFE_OPTIONS --diag_suppress=esa_on_defaulted_function_ignored) 
  ENDIF()
ENDIF()

IF(KOKKOS_ENABLE_OPENMP)
  IF    (KOKKOS_CXX_COMPILER_ID STREQUAL Clang OR KOKKOS_CXX_COMPILER_ID STREQUAL AppleClang)
    LIST(APPEND KOKKOS_COMPILE_OPTIONS -fopenmp=libomp)
    LIST(APPEND KOKKOS_LINK_OPTIONS    -fopenmp=libomp)
  ELSEIF(KOKKOS_CXX_COMPILER_ID STREQUAL PGI)
    LIST(APPEND KOKKOS_COMPILE_OPTIONS -mp)
    LIST(APPEND KOKKOS_LINK_OPTIONS -mp)
  ELSEIF(KOKKOS_CXX_COMPILER_ID STREQUAL XL)
    LIST(APPEND KOKKOS_COMPILE_OPTIONS -qsmp=omp)
    LIST(APPEND KOKKOS_LINK_OPTIONS    -qsmp=omp)
  ELSEIF(KOKKOS_CXX_COMPILER_ID STREQUAL Cray)
    #on by default
  ELSEIF(KOKKOS_CXX_COMPILER_ID STREQUAL NVIDIA)
    LIST(APPEND KOKKOS_XCOMPILER_OPTIONS -fopenmp)
    LIST(APPEND KOKKOS_LINK_OPTIONS   -fopenmp)
  ELSE()
    LIST(APPEND KOKKOS_COMPILE_OPTIONS -fopenmp)
    LIST(APPEND KOKKOS_LINK_OPTIONS    -fopenmp)
  ENDIF()
ENDIF()

IF (KOKKOS_ENABLE_ARCH_ARMV81)
  IF (NOT KOKKOS_CXX_COMPILER_ID STREQUAL Cray AND NOT KOKKOS_CXX_COMPILER_ID STREQUAL PGI)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -march=armv8.1-a)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -march=armv8.1-a)
  ENDIF()
ENDIF()

IF (KOKKOS_ENABLE_ARCH_ARMV8_THUNDERX)
  SET(KOKKOS_ARCH_ARMV80 ON CACHE BOOL "enable armv80" FORCE)
  IF (NOT KOKKOS_CXX_COMPILER_ID STREQUAL Cray AND NOT KOKKOS_CXX_COMPILER_ID STREQUAL PGI)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -march=armv8-a -mtune=thunderx)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -march=armv8-a -mtune=thunderx)
  ENDIF()
ENDIF()

IF (KOKKOS_ENABLE_ARCH_ARMV8_THUNDERX2)
  SET(KOKKOS_ARCH_ARMV81 ON CACHE BOOL "enable armv80" FORCE)
  IF (NOT KOKKOS_CXX_COMPILER_ID STREQUAL Cray AND NOT KOKKOS_CXX_COMPILER_ID STREQUAL PGI)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -mtune=thunderx2t99 -mcpu=thunderx2t99)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -mtune=thunderx2t99 -mcup=thunderx2t99)
  ENDIF()
ENDIF()

IF (KOKKOS_ENABLE_ARCH_EPYC)
  IF (KOKKOS_CXX_COMPILER_ID STREQUAL Intel)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -mavx2)
    LIST(APPEND KOKKOS_LINK_OPTIONS -mavx2)
  ELSE()
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -march=znver1 -mtune=znver1)
    LIST(APPEND KOKKOS_LINK_OPTIONS -march=znver1 -mtune=znver1)
  ENDIF()
ENDIF()

IF (KOKKOS_ENABLE_ARCH_WSM)
  #sse42
  IF (KOKKOS_CXX_COMPILER_ID STREQUAL Intel)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -xSSE4.2)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -xSSE4.2)
  ELSEIF(KOKKOS_CXX_COMPILER_ID STREQUAL PGI)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -tp=nehalem)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -tp=nehalem)
  ELSEIF(KOKKOX_CXX_COMPILER_ID STREQUAL Cray)
    #nothing
  ELSE()
    #assume gcc flags
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -msse4.2)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -msse4.2)
  ENDIF()
ENDIF()

IF (KOKKOS_ENABLE_ARCH_SNB OR KOKKOS_ENABLE_ARCH_AMDAVX)
  #avx
  IF (KOKKOS_CXX_COMPILER_ID STREQUAL Intel)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -mavx)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -mavx)
  ELSEIF(KOKKOS_CXX_COMPILER_ID STREQUAL PGI)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -tp=sandybridge)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -tp=sandybridge)
  ELSEIF(KOKKOX_CXX_COMPILER_ID STREQUAL Cray)
    #nothing
  ELSE()
    #assume gcc flags
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -mavx)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -mavx)
  ENDIF()
ENDIF()

IF (KOKKOS_ARCH_HSW OR KOKKOS_ARCH_BDW)
  SET(KOKKOS_ARCH_AVX2 ON CACHE BOOL "enable avx2" FORCE)
  IF (KOKKOS_CXX_COMPILER_ID STREQUAL Intel)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -xCORE-AVX2)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -xCORE-AVX2)
  ELSEIF(KOKKOS_CXX_COMPILER_ID STREQUAL PGI)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -tp=haswell)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -tp=haswell)
  ELSEIF(KOKKOX_CXX_COMPILER_ID STREQUAL Cray)
    #nothing
  ELSE()
    #assume gcc flags
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -march=core-avx2 -mtune=core-avx2)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -march=core-avx2 -mtune=core-avx2)
    IF (KOKKOS_ARCH_BDW)
      LIST(APPEND KOKKOS_COMPILER_OPTIONS -mrtm)
      LIST(APPEND KOKKOS_LINK_OPTIONS     -mrtm)
    ENDIF()
  ENDIF()
ENDIF()

IF (KOKKOS_ARCH_KNL)
  #avx512-mic
  SET(KOKKOS_ARCH_AVX512MIC ON CACHE BOOL "enable avx-512 MIC" FORCE)
  IF (KOKKOS_CXX_COMPILER_ID STREQUAL Intel)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -xMIC-AVX512)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -xMIC-AVX512)
  ELSEIF(KOKKOS_CXX_COMPILER_ID STREQUAL PGI)
    #nothing
  ELSEIF(KOKKOX_CXX_COMPILER_ID STREQUAL Cray)
    #nothing
  ELSE()
    #assume gcc flags
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -march=knl -mtune=knl)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -march=knl -mtune=knl)
  ENDIF()
ENDIF()

IF (KOKKOS_ARCH_SKX)
  #avx512-xeon
  SET(KOKKOS_ARCH_AVX512XEON ON CACHE BOOL "enable avx-512 Xeon" FORCE)
  IF (KOKKOS_CXX_COMPILER_ID STREQUAL Intel)
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -xCORE-AVX512)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -xCORE-AVX512)
  ELSEIF(KOKKOS_CXX_COMPILER_ID STREQUAL PGI)
    #nothing
  ELSEIF(KOKKOX_CXX_COMPILER_ID STREQUAL Cray)
    #nothing
  ELSE()
    #assume gcc flags
    LIST(APPEND KOKKOS_COMPILER_OPTIONS -march=skylake-avx512 -mtune=skylake-avx512 -mrtm)
    LIST(APPEND KOKKOS_LINK_OPTIONS     -march=skylake-avx512 -mtune=skylake-avx512 -mrtm)
  ENDIF()
ENDIF()

IF (KOKKOS_ARCH_POWER7)
  IF (NOT KOKKOS_CXX_COMPILER_ID STREQUAL PGI)
    LIST(APPEND KOKKOS_COMPILE_OPTIONS KOKKOS_CXXFLAGS += -mcpu=power7 -mtune=power7)
    LIST(APPEND KOKKOS_LINK_OPTIONS KOKKOS_CXXFLAGS += -mcpu=power7 -mtune=power7)
  ENDIF()
ENDIF()

IF (KOKKOS_ARCH_POWER8)
  IF (NOT KOKKOS_CXX_COMPILER_ID STREQUAL PGI AND NOT KOKKOS_CXX_COMPILER_ID STREQUAL NVIDIA)
    LIST(APPEND KOKKOS_COMPILE_OPTIONS KOKKOS_CXXFLAGS += -mcpu=power8 -mtune=power8)
    LIST(APPEND KOKKOS_LINK_OPTIONS KOKKOS_CXXFLAGS += -mcpu=power8 -mtune=power8)
  ENDIF()
ENDIF()

IF (KOKKOS_ARCH_POWER9)
  IF (NOT KOKKOS_CXX_COMPILER_ID STREQUAL PGI AND NOT KOKKOS_CXX_COMPILER_ID STREQUAL NVIDIA)
    LIST(APPEND KOKKOS_COMPILE_OPTIONS KOKKOS_CXXFLAGS += -mcpu=power9 -mtune=power9)
    LIST(APPEND KOKKOS_LINK_OPTIONS KOKKOS_CXXFLAGS += -mcpu=power9 -mtune=power9)
  ENDIF()
ENDIF()


IF (KOKKOS_ENABLE_ARCH_KAVERI)
  SET(KOKKOS_ARCH_ROCM 701 CACHE STRING "rocm arch" FORCE)
ENDIF()

IF (KOKKOS_ENABLE_ARCH_CARRIZO)
  SET(KOKKOS_ARCH_ROCM 801 CACHE STRING "rocm arch" FORCE)
ENDIF()

IF (KOKKOS_ARCH_FIJI)
  SET(KOKKOS_ARCH_ROCM 803 CACHE STRING "rocm arch" FORCE)
ENDIF()

IF (KOKKOS_ARCH_VEGA)
  SET(KOKKOS_ARCH_ROCM 900 CACHE STRING "rocm arch" FORCE)
ENDIF()

IF (KOKKOS_ARCH_GFX901)
  SET(KOKKOS_ARCH_ROCM 901 CACHE STRING "rocm arch" FORCE)
ENDIF()

IF (KOKKOS_ARCH_RYZEN)
ENDIF()



IF (KOKKOS_ENABLE_ARCH_GFX901)
ENDIF()


IF (KOKKOS_ENABLE_CUDA_RELOCATED_DEVICE_CODE)
  IF (KOKKOS_COMPILER_ID STREQUAL Clang)
    LIST(APPEND KOKKOS_CUDA_OPTIONS -fcuda-rdc)
  ELSEIF (KOKKOS_COMPILER_ID STREQUAL NVIDIA)
    LIST(APPEND KOKKOS_CUDA_OPTIONS --relocatable-device-code=true)
  ENDIF()
ENDIF()


IF (KOKKOS_ARCH_KEPLER30)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAGS}=sm_30")
ENDIF()

IF (KOKKOS_ARCH_KEPLER32)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAG}=sm_32")
ENDIF()

IF (KOKKOS_ARCH_KEPLER35)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAG}=sm_35")
ENDIF()

IF (KOKKOS_ARCH_KEPLER35)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAG}=sm_37")
ENDIF()

IF (KOKKOS_ARCH_MAXWELL50)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAG}=sm_50")
ENDIF()

IF (KOKKOS_ARCH_MAXWELL52)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAG}=sm_52")
ENDIF()

IF (KOKKOS_ARCH_MAXWELL53)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAG}=sm_53")
ENDIF()

IF (KOKKOS_ARCH_PASCAL60)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAG}=sm_60")
ENDIF()

IF (KOKKOS_ARCH_PASCAL61)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAG}=sm_61")
ENDIF()

IF (KOKKOS_ARCH_VOLTA70)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAG}=sm_70")
ENDIF()

IF (KOKKOS_ARCH_VOLTA72)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAG}=sm_72")
ENDIF()

IF (KOKKOS_ARCH_TURING75)
  LIST(APPEND KOKKOS_CUDA_OPTIONS "${CUDA_ARCH_FLAG}=sm_75")
ENDIF()

SET(KOKKOS_CXX_STANDARD "" CACHE STRING "The C++ standard for Kokkos to use: c++11, c++14, or c++17")
SET(KOKKOS_CXX_FEATURES "" CACHE STRING "The list of C++ features for Kokkos to enable")
SET(CXX_STANDARD_TEST)

IF (NOT KOKKOS_CXX_STANDARD AND NOT CMAKE_CXX_STANDARD)
  SET(KOKKOS_CXX_STANDARD "11")
ELSEIF(NOT KOKKOS_CXX_STANDARD)
  SET(KOKKOS_CXX_STANDARD ${CMAKE_CXX_STANDARD})
ENDIF()

IF (KOKKOS_CXX_STANDARD)
  IF (${KOKKOS_CXX_STANDARD} STREQUAL "c++98")
    MESSAGE(WARNING "Deprecated Kokkos C++ standard set as 'c++98'. Use '98' instead.")
    SET(KOKKOS_CXX_STANDARD "98")
  ELSEIF (${KOKKOS_CXX_STANDARD} STREQUAL "c++11")
    MESSAGE(WARNING "Deprecated Kokkos C++ standard set as 'c++11'. Use '11' instead.")
    SET(KOKKOS_CXX_STANDARD "11")
  ELSEIF(${KOKKOS_CXX_STANDARD} STREQUAL "c++14")
    MESSAGE(WARNING "Deprecated Kokkos C++ standard set as 'c++14'. Use '14' instead.")
    SET(KOKKOS_CXX_STANDARD "14")
  ELSEIF(${KOKKOS_CXX_STANDARD} STREQUAL "c++17")
    MESSAGE(WARNING "Deprecated Kokkos C++ standard set as 'c++17'. Use '17' instead.")
    SET(KOKKOS_CXX_STANDARD "17")
  ENDIF()
ENDIF()

IF (KOKKOS_CXX_STANDARD AND CMAKE_CXX_STANDARD)
  #make sure these are consistent
  IF (NOT KOKKOS_CXX_STANDARD STREQUAL CMAKE_CXX_STANDARD)
    MESSAGE(FATAL_ERROR "Specified both CMAKE_CXX_STANDARD and KOKKOS_CXX_STANDARD, but they don't match")
  ENDIF()
ENDIF()

IF (${KOKKOS_CXX_STANDARD} STREQUAL "11")
  LIST(APPEND KOKKOS_CXX_FEATURES cxx_std_11)
ELSEIF(${KOKKOS_CXX_STANDARD} STREQUAL "14")
  LIST(APPEND KOKKOS_CXX_FEATURES cxx_std_14)
ELSEIF(${KOKKOS_CXX_STANDARD} STREQUAL "17")
  LIST(APPEND KOKKOS_CXX_FEATURES cxx_std_17)
ELSEIF(${KOKKOS_CXX_STANDARD} STREQUAL "98")
  MESSAGE(FATAL_ERROR "Kokkos requires C++11 or newer!")
ELSEIF(${KOKKOX_CXX_STANDARD} STREQUAL "1Y")
ELSEIF(${KOKKOX_CXX_STANDARD} STREQUAL "1Z")
ELSEIF(${KOKKOX_CXX_STANDARD} STREQUAL "2A")
ENDIF()






############################ PRINT CONFIGURE STATUS ############################

if(KOKKOS_CMAKE_VERBOSE)
  message(STATUS "")
  message(STATUS "****************** Kokkos Settings ******************")
  message(STATUS "Execution Spaces")

  if(KOKKOS_ENABLE_CUDA)
    message(STATUS "  Device Parallel: Cuda")
  else()
    message(STATUS "  Device Parallel: None")
  endif()

  if(KOKKOS_ENABLE_OPENMP)
    message(STATUS "    Host Parallel: OpenMP")
  elseif(KOKKOS_ENABLE_PTHREAD)
    message(STATUS "    Host Parallel: Pthread")
  elseif(KOKKOS_ENABLE_QTHREADS)
    message(STATUS "    Host Parallel: Qthreads")
  elseif(KOKKOS_ENABLE_HPX)
    message(STATUS "    Host Parallel: HPX")
  else()
    message(STATUS "    Host Parallel: None")
  endif()

  if(KOKKOS_ENABLE_SERIAL)
    message(STATUS "      Host Serial: Serial")
  else()
    message(STATUS "      Host Serial: None")
  endif()

  message(STATUS "")
  message(STATUS "Architectures:")
  foreach(Arch ${KOKKOS_ARCH_LIST})
    string(TOUPPER ${Arch} ARCH)
    if (KOKKOS_ENABLE_${ARCH})
      message(STATUS " ${Arch}")
    endif()
  endforeach()

  message(STATUS "")
  message(STATUS "Enabled options:")

  if(KOKKOS_SEPARATE_LIBS)
    message(STATUS "  KOKKOS_SEPARATE_LIBS")
  endif()

  if(KOKKOS_ENABLE_CUDA)
    if(KOKKOS_CUDA_DIR)
      message(STATUS "  KOKKOS_CUDA_DIR: ${KOKKOS_CUDA_DIR}")
    endif()
  endif()

  if(KOKKOS_QTHREADS_DIR)
    message(STATUS "  KOKKOS_QTHREADS_DIR: ${KOKKOS_QTHREADS_DIR}")
  endif()

  if(KOKKOS_HWLOC_DIR)
    message(STATUS "  KOKKOS_HWLOC_DIR: ${KOKKOS_HWLOC_DIR}")
  endif()

  if(KOKKOS_MEMKIND_DIR)
    message(STATUS "  KOKKOS_MEMKIND_DIR: ${KOKKOS_MEMKIND_DIR}")
  endif()

  if(KOKKOS_HPX_DIR)
    message(STATUS "  KOKKOS_HPX_DIR: ${KOKKOS_HPX_DIR}")
  endif()

  message(STATUS "")
  message(STATUS "*****************************************************")
  message(STATUS "")
endif()
